***A***

pyskl dist_train.sh
=====
#!/usr/bin/env bash

export MASTER_PORT=$((12000 + $RANDOM % 20000))
set -x

CONFIG=$1
GPUS=$2

MKL_SERVICE_FORCE_INTEL=1 PYTHONPATH="$(dirname $0)/..":$PYTHONPATH \
torchrun --nproc_per_node=$GPUS --master_port=$MASTER_PORT \
    $(dirname "$0")/train.py $CONFIG --launcher pytorch ${@:3}
# Any arguments from the third one are captured by ${@:3}


pyskl train.py
====
# Copyright (c) OpenMMLab. All rights reserved.
# flake8: noqa: E722
import argparse
import mmcv
import os
import os.path as osp
import time
import torch
import torch.distributed as dist
from mmcv import Config
from mmcv import digit_version as dv
from mmcv.runner import get_dist_info, init_dist, set_random_seed
from mmcv.utils import get_git_hash

from pyskl import __version__
from pyskl.apis import init_random_seed, train_model
from pyskl.datasets import build_dataset
from pyskl.models import build_model
from pyskl.utils import collect_env, get_root_logger, mc_off, mc_on, test_port


def parse_args():
    parser = argparse.ArgumentParser(description='Train a recognizer')
    parser.add_argument('config', help='train config file path')
    parser.add_argument(
        '--validate',
        action='store_true',
        help='whether to evaluate the checkpoint during training')
    parser.add_argument(
        '--test-last',
        action='store_true',
        help='whether to test the checkpoint after training')
    parser.add_argument(
        '--test-best',
        action='store_true',
        help='whether to test the best checkpoint (if applicable) after training')
    parser.add_argument('--seed', type=int, default=None, help='random seed')
    parser.add_argument(
        '--deterministic',
        action='store_true',
        help='whether to set deterministic options for CUDNN backend.')
    parser.add_argument(
        '--launcher',
        choices=['pytorch', 'slurm'],
        default='pytorch',
        help='job launcher')
    parser.add_argument(
        '--compile',
        action='store_true',
        help='whether to compile the model before training / testing (only available in pytorch 2.0)')
    parser.add_argument('--local_rank', type=int, default=-1)
    parser.add_argument('--local-rank', type=int, default=-1)
    args = parser.parse_args()
    if 'LOCAL_RANK' not in os.environ:
        os.environ['LOCAL_RANK'] = str(args.local_rank)

    return args


def main():
    args = parse_args()

    cfg = Config.fromfile(args.config)

    # set cudnn_benchmark
    if cfg.get('cudnn_benchmark', False):
        torch.backends.cudnn.benchmark = True

    # work_dir is determined in this priority:
    # config file > default (base filename)
    if cfg.get('work_dir', None) is None:
        # use config filename as default work_dir if cfg.work_dir is None
        cfg.work_dir = osp.join('./work_dirs', osp.splitext(osp.basename(args.config))[0])

    if not hasattr(cfg, 'dist_params'):
        cfg.dist_params = dict(backend='nccl')

    init_dist(args.launcher, **cfg.dist_params)
    rank, world_size = get_dist_info()
    cfg.gpu_ids = range(world_size)

    auto_resume = cfg.get('auto_resume', True)
    if auto_resume and cfg.get('resume_from', None) is None:
        resume_pth = osp.join(cfg.work_dir, 'latest.pth')
        if osp.exists(resume_pth):
            cfg.resume_from = resume_pth

    # create work_dir
    mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))
    # dump config
    cfg.dump(osp.join(cfg.work_dir, osp.basename(args.config)))
    # init logger before other steps
    timestamp = time.strftime('%Y%m%d_%H%M%S', time.localtime())
    log_file = osp.join(cfg.work_dir, f'{timestamp}.log')
    logger = get_root_logger(log_file=log_file, log_level=cfg.get('log_level', 'INFO'))

    # init the meta dict to record some important information such as
    # environment info and seed, which will be logged
    meta = dict()
    # log env info
    env_info_dict = collect_env()
    env_info = '\n'.join([f'{k}: {v}' for k, v in env_info_dict.items()])
    dash_line = '-' * 60 + '\n'
    logger.info('Environment info:\n' + dash_line + env_info + '\n' +
                dash_line)
    meta['env_info'] = env_info

    # log some basic info
    logger.info(f'Config: {cfg.pretty_text}')

    # set random seeds
    seed = init_random_seed(args.seed)
    logger.info(f'Set random seed to {seed}, deterministic: {args.deterministic}')
    set_random_seed(seed, deterministic=args.deterministic)

    cfg.seed = seed
    meta['seed'] = seed
    meta['config_name'] = osp.basename(args.config)
    meta['work_dir'] = osp.basename(cfg.work_dir.rstrip('/\\'))

    model = build_model(cfg.model)
    if dv(torch.__version__) >= dv('2.0.0') and args.compile:
        model = torch.compile(model)

    datasets = [build_dataset(cfg.data.train)]

    cfg.workflow = cfg.get('workflow', [('train', 1)])
    assert len(cfg.workflow) == 1
    if cfg.checkpoint_config is not None:
        # save pyskl version, config file content and class names in
        # checkpoints as meta data
        cfg.checkpoint_config.meta = dict(
            pyskl_version=__version__ + get_git_hash(digits=7),
            config=cfg.pretty_text)

    test_option = dict(test_last=args.test_last, test_best=args.test_best)

    default_mc_cfg = ('localhost', 22077)
    memcached = cfg.get('memcached', False)

    if rank == 0 and memcached:
        # mc_list is a list of pickle files you want to cache in memory.
        # Basically, each pickle file is a dictionary.
        mc_cfg = cfg.get('mc_cfg', default_mc_cfg)
        assert isinstance(mc_cfg, tuple) and mc_cfg[0] == 'localhost'
        if not test_port(mc_cfg[0], mc_cfg[1]):
            mc_on(port=mc_cfg[1], launcher=args.launcher)
        retry = 3
        while not test_port(mc_cfg[0], mc_cfg[1]) and retry > 0:
            time.sleep(5)
            retry -= 1
        assert retry >= 0, 'Failed to launch memcached. '

    dist.barrier()

    train_model(model, datasets, cfg, validate=args.validate, test=test_option, timestamp=timestamp, meta=meta)
    dist.barrier()

    if rank == 0 and memcached:
        mc_off()


if __name__ == '__main__':
    main()



pyskl dist_tesh.sh
=====#!/usr/bin/env bash

export MASTER_PORT=$((12000 + $RANDOM % 20000))
set -x

CONFIG=$1
CHECKPOINT=$2
GPUS=$3

MKL_SERVICE_FORCE_INTEL=1 PYTHONPATH="$(dirname $0)/..":$PYTHONPATH \
# Arguments starting from the fourth one are captured by ${@:4}
torchrun --nproc_per_node=$GPUS --master_port=$MASTER_PORT \
    $(dirname "$0")/test.py $CONFIG -C $CHECKPOINT --launcher pytorch ${@:4}



pyskl test.py
=====
# Copyright (c) OpenMMLab. All rights reserved.
# flake8: noqa: E722
import argparse
import mmcv
import os
import os.path as osp
import time
import torch
import torch.distributed as dist
from mmcv import Config
from mmcv import digit_version as dv
from mmcv import load
from mmcv.cnn import fuse_conv_bn
from mmcv.engine import multi_gpu_test
from mmcv.fileio.io import file_handlers
from mmcv.parallel import MMDistributedDataParallel
from mmcv.runner import get_dist_info, init_dist, load_checkpoint

from pyskl.datasets import build_dataloader, build_dataset
from pyskl.models import build_model
from pyskl.utils import cache_checkpoint, mc_off, mc_on, test_port


def parse_args():
    parser = argparse.ArgumentParser(
        description='pyskl test (and eval) a model')
    parser.add_argument('config', help='test config file path')
    parser.add_argument('-C', '--checkpoint', help='checkpoint file', default=None)
    parser.add_argument(
        '--out',
        default=None,
        help='output result file in pkl/yaml/json format')
    parser.add_argument(
        '--fuse-conv-bn',
        action='store_true',
        help='Whether to fuse conv and bn, this will slightly increase'
        'the inference speed')
    parser.add_argument(
        '--eval',
        type=str,
        nargs='+',
        default=['top_k_accuracy', 'mean_class_accuracy'],
        help='evaluation metrics, which depends on the dataset, e.g.,'
        ' "top_k_accuracy", "mean_class_accuracy" for video dataset')
    parser.add_argument(
        '--tmpdir',
        help='tmp directory used for collecting results from multiple workers')
    parser.add_argument(
        '--average-clips',
        choices=['score', 'prob', None],
        default=None,
        help='average type when averaging test clips')
    parser.add_argument(
        '--launcher',
        choices=['pytorch', 'slurm'],
        default='pytorch',
        help='job launcher')
    parser.add_argument(
        '--compile',
        action='store_true',
        help='whether to compile the model before training / testing (only available in pytorch 2.0)')
    parser.add_argument('--local_rank', type=int, default=-1)
    parser.add_argument('--local-rank', type=int, default=-1)
    args = parser.parse_args()
    if 'LOCAL_RANK' not in os.environ:
        os.environ['LOCAL_RANK'] = str(args.local_rank)

    return args


def inference_pytorch(args, cfg, data_loader):
    """Get predictions by pytorch models."""
    if args.average_clips is not None:
        # You can set average_clips during testing, it will override the
        # original setting
        if cfg.model.get('test_cfg') is None and cfg.get('test_cfg') is None:
            cfg.model.setdefault('test_cfg',
                                 dict(average_clips=args.average_clips))
        else:
            if cfg.model.get('test_cfg') is not None:
                cfg.model.test_cfg.average_clips = args.average_clips
            else:
                cfg.test_cfg.average_clips = args.average_clips

    # build the model and load checkpoint
    model = build_model(cfg.model)
    if dv(torch.__version__) >= dv('2.0.0') and args.compile:
        model = torch.compile(model)

    if args.checkpoint is None:
        work_dir = cfg.work_dir
        args.checkpoint = osp.join(work_dir, 'latest.pth')
        assert osp.exists(args.checkpoint)

    args.checkpoint = cache_checkpoint(args.checkpoint)
    load_checkpoint(model, args.checkpoint, map_location='cpu')

    if args.fuse_conv_bn:
        model = fuse_conv_bn(model)

    model = MMDistributedDataParallel(
        model.cuda(),
        device_ids=[torch.cuda.current_device()],
        broadcast_buffers=False)
    outputs = multi_gpu_test(model, data_loader, args.tmpdir)

    return outputs


def main():
    args = parse_args()

    cfg = Config.fromfile(args.config)

    out = osp.join(cfg.work_dir, 'result.pkl') if args.out is None else args.out

    # Load eval_config from cfg
    eval_cfg = cfg.get('evaluation', {})
    keys = ['interval', 'tmpdir', 'start', 'save_best', 'rule', 'by_epoch', 'broadcast_bn_buffers']
    for key in keys:
        eval_cfg.pop(key, None)
    if args.eval:
        eval_cfg['metrics'] = args.eval

    mmcv.mkdir_or_exist(osp.dirname(out))
    _, suffix = osp.splitext(out)
    assert suffix[1:] in file_handlers, ('The format of the output file should be json, pickle or yaml')

    # set cudnn benchmark
    if cfg.get('cudnn_benchmark', False):
        torch.backends.cudnn.benchmark = True
    cfg.data.test.test_mode = True

    if not hasattr(cfg, 'dist_params'):
        cfg.dist_params = dict(backend='nccl')

    init_dist(args.launcher, **cfg.dist_params)
    rank, world_size = get_dist_info()
    cfg.gpu_ids = range(world_size)

    # build the dataloader
    dataset = build_dataset(cfg.data.test, dict(test_mode=True))
    dataloader_setting = dict(
        videos_per_gpu=cfg.data.get('videos_per_gpu', 1),
        workers_per_gpu=cfg.data.get('workers_per_gpu', 1),
        shuffle=False)
    dataloader_setting = dict(dataloader_setting, **cfg.data.get('test_dataloader', {}))
    data_loader = build_dataloader(dataset, **dataloader_setting)

    default_mc_cfg = ('localhost', 22077)
    memcached = cfg.get('memcached', False)

    if rank == 0 and memcached:
        # mc_list is a list of pickle files you want to cache in memory.
        # Basically, each pickle file is a dictionary.
        mc_cfg = cfg.get('mc_cfg', default_mc_cfg)
        assert isinstance(mc_cfg, tuple) and mc_cfg[0] == 'localhost'
        if not test_port(mc_cfg[0], mc_cfg[1]):
            mc_on(port=mc_cfg[1], launcher=args.launcher)
        retry = 3
        while not test_port(mc_cfg[0], mc_cfg[1]) and retry > 0:
            time.sleep(5)
            retry -= 1
        assert retry >= 0, 'Failed to launch memcached. '

    dist.barrier()
    outputs = inference_pytorch(args, cfg, data_loader)

    rank, _ = get_dist_info()
    if rank == 0:
        print(f'\nwriting results to {out}')
        dataset.dump_results(outputs, out=out)
        if eval_cfg:
            eval_res = dataset.evaluate(outputs, **eval_cfg)
            for name, val in eval_res.items():
                print(f'{name}: {val:.04f}')

    dist.barrier()
    if rank == 0 and memcached:
        mc_off()


if __name__ == '__main__':
    main()


external/pyskl/configs/posec3d/x3d_shallow_ntu60_xsub/joint.py
=====
model = dict(
    type="Recognizer3D",
    backbone=dict(
        type="X3D",
        gamma_d=1,
        in_channels=17,
        base_channels=24,
        num_stages=3,
        se_ratio=None,
        use_swish=False,
        stage_blocks=(2, 5, 3),
        spatial_strides=(2, 2, 2),
    ),
    cls_head=dict(type="I3DHead", in_channels=216, num_classes=60, dropout=0.5),
    test_cfg=dict(average_clips="prob"),
)

dataset_type = "PoseDataset"
ann_file = "data/nturgbd/ntu60_hrnet.pkl"
left_kp = [1, 3, 5, 7, 9, 11, 13, 15]
right_kp = [2, 4, 6, 8, 10, 12, 14, 16]
train_pipeline = [
    dict(type="UniformSampleFrames", clip_len=48),
    dict(type="PoseDecode"),
    dict(type="PoseCompact", hw_ratio=1.0, allow_imgpad=True),
    dict(type="Resize", scale=(-1, 64)),
    dict(type="RandomResizedCrop", area_range=(0.56, 1.0)),
    dict(type="Resize", scale=(56, 56), keep_ratio=False),
    dict(type="Flip", flip_ratio=0.5, left_kp=left_kp, right_kp=right_kp),
    dict(type="GeneratePoseTarget", with_kp=True, with_limb=False),
    dict(type="FormatShape", input_format="NCTHW_Heatmap"),
    dict(type="Collect", keys=["imgs", "label"], meta_keys=[]),
    dict(type="ToTensor", keys=["imgs", "label"]),
]
val_pipeline = [
    dict(type="UniformSampleFrames", clip_len=48, num_clips=1),
    dict(type="PoseDecode"),
    dict(type="PoseCompact", hw_ratio=1.0, allow_imgpad=True),
    dict(type="Resize", scale=(64, 64), keep_ratio=False),
    dict(type="GeneratePoseTarget", with_kp=True, with_limb=False),
    dict(type="FormatShape", input_format="NCTHW_Heatmap"),
    dict(type="Collect", keys=["imgs", "label"], meta_keys=[]),
    dict(type="ToTensor", keys=["imgs"]),
]
test_pipeline = [
    dict(type="UniformSampleFrames", clip_len=48, num_clips=10),
    dict(type="PoseDecode"),
    dict(type="PoseCompact", hw_ratio=1.0, allow_imgpad=True),
    dict(type="Resize", scale=(64, 64), keep_ratio=False),
    dict(
        type="GeneratePoseTarget",
        with_kp=True,
        with_limb=False,
        double=True,
        left_kp=left_kp,
        right_kp=right_kp,
    ),
    dict(type="FormatShape", input_format="NCTHW_Heatmap"),
    dict(type="Collect", keys=["imgs", "label"], meta_keys=[]),
    dict(type="ToTensor", keys=["imgs"]),
]
data = dict(
    videos_per_gpu=32,
    workers_per_gpu=4,
    test_dataloader=dict(videos_per_gpu=1),
    train=dict(
        type="RepeatDataset",
        times=10,
        dataset=dict(
            type=dataset_type,
            ann_file=ann_file,
            split="xsub_train",
            pipeline=train_pipeline,
        ),
    ),
    val=dict(
        type=dataset_type, ann_file=ann_file, split="xsub_val", pipeline=val_pipeline
    ),
    test=dict(
        type=dataset_type, ann_file=ann_file, split="xsub_val", pipeline=test_pipeline
    ),
)
# optimizer
optimizer = dict(
    type="SGD", lr=0.4, momentum=0.9, weight_decay=0.0003
)  # this lr is used for 8 gpus
optimizer_config = dict(grad_clip=dict(max_norm=40, norm_type=2))
# learning policy
lr_config = dict(policy="CosineAnnealing", by_epoch=False, min_lr=0)
total_epochs = 24
checkpoint_config = dict(interval=1)
evaluation = dict(
    interval=1, metrics=["top_k_accuracy", "mean_class_accuracy"], topk=(1, 5)
)
log_config = dict(interval=20, hooks=[dict(type="TextLoggerHook")])
log_level = "INFO"
work_dir = "./work_dirs/posec3d/x3d_shallow_ntu60_xsub/joint"


***B***

---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
File /home/wbfw109v2/repo/synergy-hub/mmaction_or_pyskl-files/ipython_test.py:156
    154 # Perform inference using PoseC3D model
    155 with torch.no_grad():
--> 156     output = posec3d_model(return_loss=False, imgs=input_tensor)
    158 # Get the predicted action class
    159 action = output.argmax(dim=1).item()

File ~/.cache/pypoetry/virtualenvs/python-study-JojGeswE-py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py:1553, in Module._wrapped_call_impl(self, *args, **kwargs)
   1551     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]
   1552 else:
-> 1553     return self._call_impl(*args, **kwargs)

File ~/.cache/pypoetry/virtualenvs/python-study-JojGeswE-py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py:1562, in Module._call_impl(self, *args, **kwargs)
   1557 # If we don't have any hooks, we want to skip the rest of the logic in
   1558 # this function, and just call forward.
   1559 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks
   1560         or _global_backward_pre_hooks or _global_backward_hooks
   1561         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1562     return forward_call(*args, **kwargs)
   1564 try:
   1565     result = None

File ~/repos/synergy-hub/external/pyskl/pyskl/models/recognizers/base.py:158, in BaseRecognizer.forward(self, imgs, label, return_loss, **kwargs)
...
--> 603 return F.conv3d(
    604     input, weight, bias, self.stride, self.padding, self.dilation, self.groups
    605 )

RuntimeError: Expected 4D (unbatched) or 5D (batched) input to conv3d, but got input of size: [2, 48, 17, 1, 1, 1]



---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
File /home/wbfw109v2/repo/synergy-hub/mmaction_or_pyskl-files/ipython_test.py:113
    111 # Perform inference using PoseC3D model
    112 with torch.no_grad():
--> 113     output = posec3d_model(return_loss=False, imgs=input_tensor)
    115 # Get the predicted action class by finding the index of the maximum output value
    116 action = output.argmax(dim=1).item()

File ~/.cache/pypoetry/virtualenvs/python-study-JojGeswE-py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py:1553, in Module._wrapped_call_impl(self, *args, **kwargs)
   1551     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]
   1552 else:
-> 1553     return self._call_impl(*args, **kwargs)

File ~/.cache/pypoetry/virtualenvs/python-study-JojGeswE-py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py:1562, in Module._call_impl(self, *args, **kwargs)
   1557 # If we don't have any hooks, we want to skip the rest of the logic in
   1558 # this function, and just call forward.
   1559 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks
   1560         or _global_backward_pre_hooks or _global_backward_hooks
   1561         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1562     return forward_call(*args, **kwargs)
   1564 try:
   1565     result = None

File ~/repos/synergy-hub/external/pyskl/pyskl/models/recognizers/base.py:158, in BaseRecognizer.forward(self, imgs, label, return_loss, **kwargs)
...
--> 603 return F.conv3d(
    604     input, weight, bias, self.stride, self.padding, self.dilation, self.groups
    605 )

RuntimeError: Given groups=1, weight of size [24, 17, 1, 3, 3], expected input[1, 34, 48, 1, 1] to have 17 channels, but got 34 channels instead


---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
File /home/wbfw109v2/repo/synergy-hub/mmaction_or_pyskl-files/ipython_test.py:118
    116 # Perform inference using PoseC3D model
    117 with torch.no_grad():
--> 118     output = posec3d_model(return_loss=False, imgs=input_tensor)
    120 # Get the predicted action class by finding the index of the maximum output value
    121 action = output.argmax(dim=1).item()

File ~/.cache/pypoetry/virtualenvs/python-study-JojGeswE-py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py:1553, in Module._wrapped_call_impl(self, *args, **kwargs)
   1551     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]
   1552 else:
-> 1553     return self._call_impl(*args, **kwargs)

File ~/.cache/pypoetry/virtualenvs/python-study-JojGeswE-py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py:1562, in Module._call_impl(self, *args, **kwargs)
   1557 # If we don't have any hooks, we want to skip the rest of the logic in
   1558 # this function, and just call forward.
   1559 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks
   1560         or _global_backward_pre_hooks or _global_backward_hooks
   1561         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1562     return forward_call(*args, **kwargs)
   1564 try:
   1565     result = None

File ~/repos/synergy-hub/external/pyskl/pyskl/models/recognizers/base.py:158, in BaseRecognizer.forward(self, imgs, label, return_loss, **kwargs)
...
    535 def _check_input_dim(self, input):
    536     if input.dim() != 5:
--> 537         raise ValueError(f"expected 5D input (got {input.dim()}D input)")

ValueError: expected 5D input (got 4D input)




---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
File /home/wbfw109v2/repo/synergy-hub/mmaction_or_pyskl-files/ipython_test.py:121
    119 # Perform inference using PoseC3D model
    120 with torch.no_grad():
--> 121     output = posec3d_model(return_loss=False, imgs=input_tensor)
    123 # Get the predicted action class by finding the index of the maximum output value
    124 action = output.argmax(dim=1).item()

File ~/.cache/pypoetry/virtualenvs/python-study-JojGeswE-py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py:1553, in Module._wrapped_call_impl(self, *args, **kwargs)
   1551     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]
   1552 else:
-> 1553     return self._call_impl(*args, **kwargs)

File ~/.cache/pypoetry/virtualenvs/python-study-JojGeswE-py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py:1562, in Module._call_impl(self, *args, **kwargs)
   1557 # If we don't have any hooks, we want to skip the rest of the logic in
   1558 # this function, and just call forward.
   1559 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks
   1560         or _global_backward_pre_hooks or _global_backward_hooks
   1561         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1562     return forward_call(*args, **kwargs)
   1564 try:
   1565     result = None

File ~/repos/synergy-hub/external/pyskl/pyskl/models/recognizers/base.py:158, in BaseRecognizer.forward(self, imgs, label, return_loss, **kwargs)
...
--> 603 return F.conv3d(
    604     input, weight, bias, self.stride, self.padding, self.dilation, self.groups
    605 )

RuntimeError: Given groups=1, weight of size [24, 17, 1, 3, 3], expected input[17, 48, 1, 2, 1] to have 17 channels, but got 48 channels instead

---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
File /home/wbfw109v2/repo/synergy-hub/mmaction_or_pyskl-files/ipython_test.py:116
    113 input_tensor = input_tensor.permute(0, 3, 2, 1)  # (1, 17, 48, 2)
    115 # Ensure input tensor is 5D (N, C, T, H, W)
--> 116 input_tensor = input_tensor.view(1, 17, 48, 1, 2)  # (N, C, T, H, W)
    118 # Perform inference using PoseC3D model
    119 with torch.no_grad():

RuntimeError: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead




***C***
from collections import defaultdict, deque

import cv2
import torch
from mmcv.runner import load_checkpoint
from pyskl.models import Recognizer3D, build_model
from ultralytics import YOLO

# Load YOLO Pose model
model = YOLO("yolo11m-pose.pt")

# Load PoseC3D model
checkpoint_path = (
    Path.home()
    / "repo/synergy-hub/external/pyskl/work_dirs/posec3d/x3d_shallow_ntu60_xsub/joint/best_top1_acc_epoch_21.pth"
)
posec3d_model: Recognizer3D = build_model(
    {
        "type": "Recognizer3D",
        "backbone": {
            "type": "X3D",
            "gamma_d": 1,
            "in_channels": 17,  # YOLO Pose outputs 17 keypoints
            "base_channels": 24,
            "num_stages": 3,
            "se_ratio": None,
            "use_swish": False,
            "stage_blocks": (2, 5, 3),
            "spatial_strides": (2, 2, 2),
        },
        "cls_head": {
            "type": "I3DHead",
            "in_channels": 216,
            "num_classes": 60,  # NTU-60 dataset
            "dropout": 0.5,
        },
        "test_cfg": {"average_clips": "prob"},
    }
)
load_checkpoint(posec3d_model, str(checkpoint_path), map_location="cuda")
posec3d_model = posec3d_model.cuda().eval()

# Open the camera
cap = cv2.VideoCapture(0)

# Queue to store 48 frames
frame_queue = deque(maxlen=48)

# Track history storage (optional)
track_history = defaultdict(lambda: deque(maxlen=48))

action_classes = [
    "action1",
    "action2",
    "action3",
    "...",
]  # Update with actual action labels


def preprocess_keypoints(result):
    """
    YOLO Pose 결과로부터 keypoints를 추출하고, PoseC3D에 적합한 입력 형식으로 변환.
    """
    num_keypoints = 17  # YOLO Pose의 관절 포인트 수

    if result.keypoints is not None and result.keypoints.data.size(1) > 0:
        keypoints_tensor = result.keypoints.data
        if keypoints_tensor.numel() != 0:
            if keypoints_tensor.shape[0] > 1:
                keypoints_tensor = keypoints_tensor[:1]  # 첫 번째 사람만 선택
            keypoints_tensor = keypoints_tensor[
                :, :, :2
            ]  # (1, 17, 2) - x, y 좌표만 선택
            keypoints_tensor = keypoints_tensor.permute(0, 2, 1)  # (1, 2, 17)
            return keypoints_tensor
    return None


try:
    while cap.isOpened():
        success, frame = cap.read()
        if not success:
            break

        # YOLO Pose inference
        results = model.track(frame, persist=True, verbose=False)

        new_detection = False

        # Get the boxes and track IDs
        boxes = results[0].boxes.xywh.cpu()
        track_ids = results[0].boxes.id.int().cpu().tolist()

        # Process the keypoints and check if a new person is detected
        for box, track_id in zip(boxes, track_ids):
            keypoints = preprocess_keypoints(results[0])
            if keypoints is not None:
                frame_queue.append(keypoints)
                if track_id not in track_history or len(track_history[track_id]) == 0:
                    new_detection = True
                track_history[track_id].append(keypoints)

        # Only process if a new person is detected or the frame queue is full
        if new_detection or len(frame_queue) == 48:
            if len(frame_queue) == 48:
                # Stack the tensors in the queue (48 tensors of shape [1, 2, 17])
                input_tensor = torch.stack(
                    list(frame_queue), dim=1
                ).cuda()  # (1, 2, 48, 17)
                input_tensor = input_tensor.permute(0, 3, 2, 1)  # (1, 17, 48, 2)

                # Ensure input tensor is 5D (N, C, T, H, W)
                input_tensor = input_tensor.unsqueeze(-1).unsqueeze(
                    -1
                )  # (1, 17, 48, 1, 1)

                # Perform inference using PoseC3D model
                with torch.no_grad():
                    output = posec3d_model(return_loss=False, imgs=input_tensor)

                # Get the predicted action class by finding the index of the maximum output value
                action = output.argmax(dim=1).item()
                action_label = action_classes[action]

                # Display action label on the frame
                cv2.putText(
                    frame,
                    f"Action: {action_label}",
                    (50, 50),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    1,
                    (0, 255, 0),
                    2,
                )

        # Visualize YOLO results
        annotated_frame = results[0].plot()
        cv2.imshow("YOLO Pose Tracking", annotated_frame)

        # Exit if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break
finally:
    cap.release()
    cv2.destroyAllWindows()



ValueError: expected 5D input (got 4D input)
RuntimeError: Given groups=1, weight of size [24, 17, 1, 3, 3], expected input[2, 48, 17, 1, 1] to have 17 channels, but got 48 channels instead